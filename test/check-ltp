#!/usr/bin/python3 -u

from pathlib import Path

import parent
import testlib

allowed_journal_messages = [
    # commands
    "XFS \\(loop0\\): Mounting V5 Filesystem",
    "XFS \\(loop0\\): Unmounting Filesystem",
    "Swap area shorter than signature indicates",
    # cpuhotplug
    "irq_migrate_all_off_this_cpu: .* callbacks suppressed",
    "IRQ fixup: irq.*move in progress.*old vector.*",
    "IRQ .*: no longer affine to CPU.*",
    "process .* \\(cpuhotplug_do_s\\) no longer affine to cpu.*",
    "cpu.*spinlock event irq.*",
    "Uhhuh. NMI received for unknown reason.*",
    "Do you have a strange power saving mode enabled.*",
    "Dazed and confused, but trying to continue",
    "NOHZ: local_softirq_pending.*",
    # fs
    "ICMPv6:.*deprecated.*syscall.*net.ipv6.neigh.default.base_reachable_time.*",
    "rtc_cmos.*Deprecated ABI, please use nvmem",
    "WARNING! power/level is deprecated; use power/control instead",
    "ISOFS: Invalid session number or type of track",
    "ISOFS: Invalid session number",
    # net.tcp_cmds
    ".*:IN=lo OUT= .* SRC=127.0.0.1 DST=127.0.0.1 .*",
    "(audit: )?type=1400 audit.*: avc:  denied .* comm=\"dhclient\" .*",
    # mm
    "hrtimer: interrupt took .* ns",
    "min_free_kbytes invoked oom-killer: .*"
]


def runltp(test, case):
    m = test.machine

    # get console and result output no matter test passed or failed
    try:
        m.execute(f"cd /opt/ltp && sudo ./runltp -p -q -f {case} "
                  f"-o {case}.console -l {case}.result -S $HOME/skip.ltp",
                  timeout=1800)
    finally:
        m.download(f"/opt/ltp/output/{case}.console", str(Path.cwd() / "log"))
        m.download(f"/opt/ltp/results/{case}.result", str(Path.cwd() / "log"))
        test.addCleanup(test.machine.execute, "sudo rm -rf /opt/ltp/{output,results}")


@testlib.timeout(2400)
class TestLtp(testlib.MachineCase):
    def setUp(self):
        super().setUp()
        self.allow_journal_messages(*allowed_journal_messages)

        runltp = self.machine.execute("test -f /opt/ltp/runltp || echo 'nono'").rstrip()
        if runltp == "nono":
            self.skipTest("Running ltp test needs have ltp installed into /opt/ltp")

        self.machine.upload(["files/skip.ltp"], "$HOME")

        self.addCleanup(self.machine.execute, "sudo rm -f /opt/ltp/skip.ltp")

        # create log folder to save *.console and *.result
        (Path.cwd() / "log").mkdir(exist_ok=True)

    def test_commands(self):
        runltp(self, "commands")

    def test_connectors(self):
        runltp(self, "connectors")

    def test_cpuhotplug(self):
        runltp(self, "cpuhotplug")

    def test_crypto(self):
        runltp(self, "crypto")

    def test_dio(self):
        runltp(self, "dio")

    def test_fcntl_locktests(self):
        runltp(self, "fcntl-locktests")

    def test_fs(self):
        runltp(self, "fs")

    def test_fs_bind(self):
        runltp(self, "fs_bind")

    def test_fs_perms_simple(self):
        runltp(self, "fs_perms_simple")

    def test_fsx(self):
        runltp(self, "fsx")

    def test_hugetlb(self):
        runltp(self, "hugetlb")

    def test_hyperthreading(self):
        runltp(self, "hyperthreading")

    def test_input(self):
        runltp(self, "input")

    def test_ipc(self):
        runltp(self, "ipc")

    def test_math(self):
        runltp(self, "math")

    def test_mm(self):
        runltp(self, "mm")

    def test_nptl(self):
        runltp(self, "nptl")

    def test_power_management_tests(self):
        runltp(self, "power_management_tests")

    def test_sched(self):
        runltp(self, "sched")

    def test_uevent(self):
        runltp(self, "uevent")

    def test_net_tcp_cmds(self):
        runltp(self, "net.tcp_cmds")

    def test_net_ipv6(self):
        runltp(self, "net.ipv6")

    def test_net_stress_interface(self):
        runltp(self, "net_stress.interface")


if __name__ == '__main__':
    testlib.test_main()
